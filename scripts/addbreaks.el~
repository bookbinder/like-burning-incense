;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.

This is a string of some
text and so forth and so on.
And what comes next?


(defun test (a b)
  (interactive "r")
  (let ((s (buffer-substring-no-properties a b)))
    (print (make-list s 0 0 '() 0))))

(defun make-list (s beg cur acc ties)
  (let* ((ncur (+ 1 cur))
         (s (replace-regexp-in-string "\n" " " s))
         (s (replace-regexp-in-string "\s*\\\\bar\s*" "@@" s))
         (s (replace-regexp-in-string "\s+" " " s)))
    (cond ((= cur (length s))
           (replace-regexp-in-string
            "@@" " \\\\bar "
            (string-join
             (reverse (cons (concat "\\allowBreak " (substring s beg cur)) acc))
             " ")))
          ((string= (substring s cur (+ 1 cur)) " ")
           (if (> ties 0)
               (make-list s beg (+ 1 cur) acc ties)
             (make-list s
                        (+ 1 cur)
                        (+ 1 cur)
                        (cons (concat "\\allowBreak "
                                      (substring s beg cur))
                              acc)
                        ties)))
          ((string= (substring s cur (+ 1 cur)) "(")
           (make-list s beg (+ 1 cur) acc (+ 1 ties)))
          ((string= (substring s cur (+ 1 cur)) "[")
           (make-list s beg (+ 1 cur) acc (+ 1 ties)))
          ((string= (substring s cur (+ 1 cur)) ")")
           (make-list s beg (+ 1 cur) acc (- ties 1)))
          ((string= (substring s cur (+ 1 cur)) "]")
           (make-list s beg (+ 1 cur) acc (- ties 1)))
          (t (make-list s beg (+ 1 cur) acc ties)))))

(make-list "a4 c\\breve*5/16 \\bar \"'\" e' \n   f'([ g'] a'4)" 0 0 '() 0)
(replace-regexp-in-string "\s+" " " "this      is a    test")
(string= "a" "a")
(string-join '("A" "b") " ")

(print "well \" hello \\bar")

(defun grab (a b)
  (interactive "r")
  (let ((txt (replace-regexp-in-string
              "\\\\bar" "XXX" (buffer-substring-no-properties a b))))
    (print txt)))

this is some "stuff" y and \bar is what.
